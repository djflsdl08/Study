4. 클래스와 객체

클래스 - 객체의 행동에 대한 절차, 방법 정의
       - 객체 생성을 위한 설계도 또는 틀,캡슐
       - ex) 붕어빵 틀, 사람(이름,직업,나이,성별...)

객체 - 설계도 또는 틀로 찍어낸 실체( =인스턴스)
     - ex) 붕어빵, 김예진(21,여...)

****
public class Person {
	public String name;  // field

	public Person(){}   // 생성자
	public Person(String s){}   // 매개변수가 있는 생성자
}
public static void main(String[] args){
	Person aPerson;    // 레퍼런스 변수 선언
	                  // Person 객체 생성된것 아님(C++과의 차이)
            		// aPerson은 Person타입의 객체에 대한 레퍼런스 변수
	aPerson = new Person("Kim,Yejin");  // 객체생성!!(new 연산자)
}

****

메소드(클래스의 멤버함수) 활용
- 접근지정자 - public : 클래스 내/외부 모두 호출 가능
	     - private : 클래스 내부 멤버들만 호출 가능
             - protected : 클래스 내부 메소드들 호출 가능
                         : 다른 패키지 중 상속받은 서브 클래스만 호출 가능
                          ex) class B extends A  // B가 A를 상속받음
	     - default : 동일한 패키지 내의 모든 클래스 호출 가능
  * 캡슐화의 원칙이 지켜지도록 데이터 멤버에 대해서는 가능한 private 선언!

- 오버로딩 : 한 클래스 내에 이름이 같지만 인자의 타입과 개수가 서로 다른 메소드 중복작성 가능
           - 이름 동일, 인자의 개수 또는 인자의 타입 다름
           - 리턴타입과 접근지정자는 관계없음

가비지(객체 치환시 가리키는 레퍼런스가 없음) 컬렉션
- 자바 가상 기계가 가용 공간이 없을 때 자동으로 가비지를 회수하여 가용 메모리 공간을 늘리는 경우
- 주체: 가비지 컬렉터- 가비지 컬렉션 스레드
- 가비지 컬렉션 강제수행 : System.gc(); - 자바 가상 기계에게 단지 가비지 컬렉션이 필요하다는 제안

this() - 동일한 클래스 내의 다른 생성자 호출(생성자 코드에서만 사용가능)
       - 반드시 생성자의 첫 번째 문장에 사용

자바에서 객체 소멸은 없음(C++(delete)과의 차이)
-  new로 할당받은 후 사용하지 않게 된 객체는 가비지가 됨

final 키워드
- final 클래스: 클래스를 상속 받을 수 없음
- final 메소드: 자식 클래스가 부모 클래스의 특정 메소드를 오버라이딩 못함
- final 필드: 상수정의(초깃값 설정-변경안됨) 
              프로그램 전체에서 사용할 상수 선언 ex) public static final double PI = 3.141592

5. 상속

상속의 장점 - 클래스 사이의 멤버 중복 선언 불필요, 클래스 간결화, 클래스 계층적 분류 및 관리
       특징 - 다중상속X, 상속횟수제한X, 최상위 클래스는 java.lang.Object 클래스

서브 클래스 인스턴스가 생성될 때 생성자 순서
- 서브 클래스 생성자 호출 -> 슈퍼 클래스 생성사 호출 -> 슈퍼 클래스 생성자 실행 -> 서브 클래스 생성자 실행

슈퍼 클래스의 매개변수 있는 생성자 호출하는 방법
- super(매개변수) 사용: 반드시 생성자 코드의 첫 라인에 와야함

캐스팅(강제 타입 변환) - 업 캐스팅(서브클래스->슈퍼클래스:슈퍼클래스 = 서브클래스):슈퍼클래스멤버만접근
                       - 다운 캐스팅(업캐스팅 된것을 다시 원래대로 되돌림)
                             - 명시적으로 타입을 지정해 주어야함 Ex) Student s = (Student)p;

instanceof 연산자
- 레퍼런스가 가르키는 실제 객체가 어떤 클래스 타입인지 구분하기 위함(boolean타입)
  Ex)
  Person jee = new Student();                      Person
  Person kim = new Professor();      Student                    Researcher
  Person lee = new Researcher();                                Professor
  if(jee instanceof Person)      // true
  if(jee instanceof Student)     // true
  if(Kim instanceof Student)     // false
  if(Kim instanceof Professor)   // true
  if(Kim instanceof Researcher)  // true
  if(lee instanceof Student)     // false
  if("Java" instanceof String)   //true
  if(3 instanceof int)  //error : 객체만 사용 가능

오버로딩과 오버라이딩
오버로딩 - 메소드의 중복작성, 정적바인딩
오버라이딩 - 서브 클래스에서 슈퍼 클래스에 있는 메소드와 동일한 이름의 메소드 재작성, 동적바인딩
             슈퍼클래스 메소드의 접근 지정자보다 접근범위가 좁아질 수 없다.
             접근범위 : public > protected > default > private (따라서 private 메소드는 오버라이딩X)

추상클래스 - 클래스들의 구조선언(=책의 목차)
구현 : abstract class 이름
서브 클래스가 추상 클래스가 되지 않으려면 추상 메소드를 모두 오버라이딩 해야함
일반 메소드 포함 가능

인터페이스
- 선언 : interface 키워드 사용
- 멤버는 추상 메소드와 상수만으로 구성
- 모든 메소드는 추상메소드이며 public, 생략가능(public static final도 생략가능)
- 인터페이스 객체 생성X, 레퍼런스 변수 타입으로 사용
- 다른 인터페이스에 상속될 수 있음
  Ex) interface 상속
  interface MP3{
     void play(); void stop();
  }
  interface MusicPhone extends MP3{
     void playMP3RingTone();
  }
  Ex) interface 구현
  interface USBMouse {
    void mouseMove(); void mouseClick();
  }
  public class MouseDriver implements USBMouse {
    public void mouseMove(){}
    public void mouseClick(){}
    // 다른 메소드추가가능
  }

6. 패키지 개념과 자바 기본 패키지

object 클래스
-java.lang 패키지에 속한 클래스, 자바 클래스 구조의 최상위
-주요 매소드
  Class getClass() : 바로 이 객체 리턴
     ex) Point p = new Point(2,3);
	 System.out.println(p.getClass().getName());   // 출력 : Point
  String toString() : 객체를 문자열로 변환리턴(return getClass().getName()+"@"+Integer.toHexString(hashCode()));
     ex) Point p = new Point(2,3);
         System.out.println(a.toString());    //출력 : Point@c17164
     객체와 문자열이 + 연산이 되는 경우 객체의 toString() 메소드를 호출한다.
  ==연산자와 equals()메소드
  == : 레퍼런스가 동일한지 판단
  equals() : 내용이 동일한지 판단 -> 오버라이딩 하여 사용하는 것을 원칙
  ex) String a = new String("Hello!");
      String b = new String("Hello!");
      if(a == b) System.out.println("a == b")   // false
      if(a.equals(b)) System.out.println("a와 b의 내용이 같다.");  //true

Wrapper 클래스!(*중요)
- 기본 데이터 타입의 값을 객체로 만들어 사용(Byte,Short,Integer,Long,Character,Double,Float,Boolean)
  ex) intValue()->값 알아냄,parseInt("123")->문자열을 해당 데이터 값으로 변환,Integer.toString(123)->해당 데이터 값을 문자열로 변환
- 박싱(boxing) : 기본 데이터 타입을 Wrapper 클래스로 변환 <-> 언박싱(unboxing)

String 클래스 -> 간단한 문자열
String a = "Hello";  // 스트링 리터럴
String b = "Java";
String c = "Hello";    // 힙 메모리에서 a와 공유(리터럴 테이블)
Strind d = new String("Hello");
String e = new String("Java");
String f = new String("Hello");   // 힙 메모리에서 a와 공유하지 않음.

StringBuffer 클래스 -> 문자열의 길이가 길거나 문자열 작업이 많은 경우
객체의 해시코드 값이 같으면 같은 객체
cf) 스트링 객체는 문자열 조작 후 새로운 객체가 생성되어 해시코드 값이 달라짐 but, 스트링버퍼객체는 아님

StringTokenizer 클래스 -> 문자열을 분리하기 위해서 사용
토큰 : 구분문자로 분리된 문자열

Math 클래스 -> 모든 멤버 static으로 정의
ex) double d = Math.random()*100;  // 0.0 ~ 99.9999 실수 발생
    int n = (int)(Math.round(d));  // d를 반올림한 정수 리턴

7. 제네릭과 컬렉션

컬렉션 - 가변크기의 컨테이너, 요소(가변 개수의 객체)들의 모임
       - 컬렉션을 구현한 모든 클래스들은 Object를 상속받은 객체들만 요소로 받아들임
         따라서 기본타입(byte,char,short,int...)는Wrapper 클래스를 이용하여 객체화 한 뒤 삽입함
	 (JDK 1.5 이전버전만 해당)
Vector 클래스
경로명 : java.util.Vector
가변 개수 요소의 배열 구현 시 사용
맨 마지막이나 중간에 삽입 -> 삽입되는 요소 뒤의 요소들을 뒤로 하나씩 이동
	삽입 : add(); 사용
	       ex)
		   Vector v = new Vector();
		   v.add("Hello");	// String 삽입 가능
		   v.add(new Person()); // Person 객체 삽입 가능
		   v.add(null);		// null 삽입 가능
		   v.add(4);		// int 타입 : 컴파일 오류(JDK 1.5 이전)  =>  v.add(new Integer(4));
		   v.add('r');		// char 타입 : 컴파일 오류(JDK 1.5 이전) =>  v.add(new Character('r'));
     					// JDK 1.5 부터는 자동 박싱/언박싱의 기능으로 사용 가능
                   v.add(2,"Sahni")     // index 2에 삽입(중간 삽입 가능)
요소 삭제 -> 삭제되는 공간 뒤의 요소들을 앞으로 하나씩 이동
	삭제 : remove(); 사용
	       ex)
		  V.remove(1)	// index 1 위치에 있는 요소 삭제
		  v.removeAllElements() // Vector에 있는 모든 요소 삭제
다양한 타입 요소 삽입 가능(String, Integer,Person...)
생성 : Vector v = new Vector();  // 디폴트 용량의 Vector 생성 if.용량 지정 시 new Vector(n)하면 됨
Vector의 크기 : 들어있는 요소의 개수-size(), Vector의 용량 : 요소를 수용할 수 있는 크기-capacity()
ex) 
	Vector  v = new Vector();
	v.add(new Integer(4));
	v.add("Hello");
	v.add(new Integer(5));
	int sum = 0;
	for(int i=0;i<v.size();i++){
		Object obj = v.get(i);
		if(obj instanceof Integer){
			Integer x = (Integer)obj;
			int n = x.intValue();
			sum += n;
		}
	}
	System.out.print("모든 정수의 합은" + sum);	// 출력 : 모든 정수의 합은 9

ArrayList 클래스
경로명 : java.util.ArrayList
가변 크기의 배열을 구현한 컬렉션 클래스
Vector 클래스와 유사(다른점 : ArrayList는 다수의 스레드가 동시 조작시 동기화 지원X)
                    (다른점 : a.clear();     // ArrayList 에 있는 모든 요소 삭제)

Hashtable 클래스
경로명 : java.util.Hashtable(Map interface 구현)

